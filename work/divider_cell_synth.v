/* Generated by Yosys 0.33 (git sha1 2584903a060, gcc 10.3.0 -fPIC -Os) */

(* dynports =  1  *)
(* top =  1  *)
(* src = "./rtl/divider_cell.v:2.1-64.10" *)
module divider_cell(clk, rstn, en, dividend_de_m1, divisor_m1, merchant_ci_m1, dividend_ci_m1, dividend_kp, divisor_kp, rdy, merchant, remainder);
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  wire [1:0] _00_;
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  wire [2:0] _01_;
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  wire [2:0] _02_;
  (* src = "./rtl/divider_cell.v:6.33-6.36" *)
  input clk;
  wire clk;
  (* src = "./rtl/divider_cell.v:46.17-46.25" *)
  wire dividend;
  (* src = "./rtl/divider_cell.v:25.21-25.32" *)
  reg [1:0] dividend_ci;
  (* src = "./rtl/divider_cell.v:13.33-13.47" *)
  input [1:0] dividend_ci_m1;
  wire [1:0] dividend_ci_m1;
  (* src = "./rtl/divider_cell.v:10.33-10.47" *)
  input [3:0] dividend_de_m1;
  wire [3:0] dividend_de_m1;
  (* src = "./rtl/divider_cell.v:15.33-15.44" *)
  output [1:0] dividend_kp;
  reg [1:0] dividend_kp;
  (* src = "./rtl/divider_cell.v:23.21-23.28" *)
  reg [2:0] divisor;
  (* src = "./rtl/divider_cell.v:16.33-16.43" *)
  output [2:0] divisor_kp;
  reg [2:0] divisor_kp;
  (* src = "./rtl/divider_cell.v:11.33-11.43" *)
  input [2:0] divisor_m1;
  wire [2:0] divisor_m1;
  (* src = "./rtl/divider_cell.v:8.33-8.35" *)
  input en;
  wire en;
  (* src = "./rtl/divider_cell.v:18.33-18.41" *)
  output [2:0] merchant;
  wire [2:0] merchant;
  reg [1:0] merchant_ci;
  (* src = "./rtl/divider_cell.v:12.33-12.47" *)
  input [2:0] merchant_ci_m1;
  wire [2:0] merchant_ci_m1;
  (* src = "./rtl/divider_cell.v:17.33-17.36" *)
  output rdy;
  reg rdy;
  (* src = "./rtl/divider_cell.v:19.33-19.42" *)
  output [2:0] remainder;
  wire [2:0] remainder;
  (* src = "./rtl/divider_cell.v:7.33-7.37" *)
  input rstn;
  wire rstn;
  assign _02_[1] = 4'h8 >> { en, merchant_ci[0] };
  assign _02_[2] = 4'h8 >> { merchant_ci[1], en };
  assign _00_[0] = 4'h8 >> { dividend_ci[0], en };
  assign _00_[1] = 4'h8 >> { dividend_ci[1], en };
  assign _01_[0] = 4'h8 >> { divisor[0], en };
  assign _01_[1] = 4'h8 >> { divisor[1], en };
  assign _01_[2] = 4'h8 >> { divisor[2], en };
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) dividend_kp[0] <= 1'h0;
    else dividend_kp[0] <= _00_[0];
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) dividend_kp[1] <= 1'h0;
    else dividend_kp[1] <= _00_[1];
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) divisor_kp[0] <= 1'h0;
    else divisor_kp[0] <= _01_[0];
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) divisor_kp[1] <= 1'h0;
    else divisor_kp[1] <= _01_[1];
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) divisor_kp[2] <= 1'h0;
    else divisor_kp[2] <= _01_[2];
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) rdy <= 1'h0;
    else rdy <= en;
  reg \merchant_reg[1] ;
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) \merchant_reg[1]  <= 1'h0;
    else \merchant_reg[1]  <= _02_[1];
  assign merchant[1] = \merchant_reg[1] ;
  reg \merchant_reg[2] ;
  (* src = "./rtl/divider_cell.v:34.5-62.8" *)
  always @(posedge clk, negedge rstn)
    if (!rstn) \merchant_reg[2]  <= 1'h0;
    else \merchant_reg[2]  <= _02_[2];
  assign merchant[2] = \merchant_reg[2] ;
  (* src = "./rtl/divider_cell.v:27.5-32.8" *)
  always @(posedge clk)
    divisor[0] <= divisor_m1[0];
  (* src = "./rtl/divider_cell.v:27.5-32.8" *)
  always @(posedge clk)
    divisor[1] <= divisor_m1[1];
  (* src = "./rtl/divider_cell.v:27.5-32.8" *)
  always @(posedge clk)
    divisor[2] <= divisor_m1[2];
  (* src = "./rtl/divider_cell.v:27.5-32.8" *)
  always @(posedge clk)
    merchant_ci[0] <= merchant_ci_m1[0];
  (* src = "./rtl/divider_cell.v:27.5-32.8" *)
  always @(posedge clk)
    merchant_ci[1] <= merchant_ci_m1[1];
  (* src = "./rtl/divider_cell.v:27.5-32.8" *)
  always @(posedge clk)
    dividend_ci[0] <= dividend_ci_m1[0];
  (* src = "./rtl/divider_cell.v:27.5-32.8" *)
  always @(posedge clk)
    dividend_ci[1] <= dividend_ci_m1[1];
  assign _02_[0] = 1'h0;
  assign dividend = 1'hx;
  assign merchant[0] = 1'h0;
  assign remainder = 3'h0;
endmodule
